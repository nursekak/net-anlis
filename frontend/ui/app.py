import streamlit as st
import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
    page_icon="üåê",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

# –ë—ç–∫–µ–Ω–¥ URL
BACKEND_URL = "http://localhost:5000/api"

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.header("–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    try:
        response = requests.get(f"{BACKEND_URL}/network/interfaces")
        if response.status_code == 200:
            interfaces = response.json()
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
            interface_names = [f"{i['name']} ({i['ipAddress']})" for i in interfaces]
            selected_interface = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:",
                interface_names
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if selected_interface:
                selected_index = interface_names.index(selected_interface)
                interface = interfaces[selected_index]
                
                st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                st.write(f"**–ò–º—è:** {interface['name']}")
                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {interface['description']}")
                st.write(f"**IP-–∞–¥—Ä–µ—Å:** {interface['ipAddress']}")
                st.write(f"**–ú–∞—Å–∫–∞ –ø–æ–¥—Å–µ—Ç–∏:** {interface['subnetMask']}")
                st.write(f"**MAC-–∞–¥—Ä–µ—Å:** {interface['macAddress']}")
                st.write(f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {interface['status']}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –±–∞–π—Ç/—Å –≤ –ú–±–∏—Ç/—Å
                speed_mbps = interface['speed'] * 8 / (1024 * 1024) if interface['speed'] > 0 else 0
                st.write(f"**–°–∫–æ—Ä–æ—Å—Ç—å:** {speed_mbps:.2f} –ú–±–∏—Ç/—Å")
                
                st.write(f"**–¢–∏–ø:** {interface['interfaceType']}")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å"):
                    with st.spinner("–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏..."):
                        try:
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
                            status_text.text("–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...")
                            response = requests.get(f"{BACKEND_URL}/network/test-speed/{interface['name']}")
                            progress_bar.progress(50)
                            
                            if response.status_code == 200:
                                speed_result = response.json()
                                progress_bar.progress(100)
                                status_text.text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                                
                                st.success("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                                st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**")
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.metric("–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏", f"{speed_result['downloadSpeed']:.2f} –ú–±–∏—Ç/—Å", 
                                             delta=None, delta_color="normal")
                                with col2:
                                    st.metric("–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏", f"{speed_result['uploadSpeed']:.2f} –ú–±–∏—Ç/—Å", 
                                             delta=None, delta_color="normal")
                                
                                st.write(f"**–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** {datetime.fromisoformat(speed_result['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                                st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                                if speed_result['downloadSpeed'] < 10:
                                    st.warning("–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π (10 –ú–±–∏—Ç/—Å)")
                                if speed_result['uploadSpeed'] < 5:
                                    st.warning("–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏ –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π (5 –ú–±–∏—Ç/—Å)")
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

with col2:
    st.header("–ê–Ω–∞–ª–∏–∑ URL")
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", placeholder="https://example.com")
    
    if url:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ URL
            response = requests.get(f"{BACKEND_URL}/network/analyze-url", params={"url": url})
            if response.status_code == 200:
                result = response.json()
                
                if not result['isValid']:
                    st.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL: {result['validationError']}")
                else:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.write("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    st.write(f"**–ò—Å—Ö–æ–¥–Ω—ã–π URL:** {result['originalUrl']}")
                    st.write(f"**–°—Ö–µ–º–∞ (–ø—Ä–æ—Ç–æ–∫–æ–ª):** {result['scheme']}")
                    st.write(f"**–•–æ—Å—Ç:** {result['host']}")
                    st.write(f"**–ü–æ—Ä—Ç:** {result['port']}")
                    st.write(f"**–ü—É—Ç—å:** {result['path']}")
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                    if result['queryParameters']:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
                        for param in result['queryParameters']:
                            st.write(f"- {param['name']}: {param['value'] if param['value'] else '–ø—É—Å—Ç–æ'}")
                    else:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:** –Ω–µ—Ç")
                    
                    st.write(f"**–§—Ä–∞–≥–º–µ–Ω—Ç:** {result['fragment']}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    if result['userInfo']:
                        st.write(f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:** {result['userInfo']}")
                    st.write(f"**Authority:** {result['authority']}")
                    st.write(f"**Absolute URI:** {result['absoluteUri']}")
                    st.write(f"**Local Path:** {result['localPath']}")
                    st.write(f"**Path and Query:** {result['pathAndQuery']}")
                    
                    # –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    st.write("**–°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:**")
                    st.write(f"**–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:** {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if result['isAvailable'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
                    st.write("> *–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ICMP-–∑–∞–ø—Ä–æ—Å—ã (ping). –≠—Ç–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ö–æ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω.*")
                    st.write(f"**–¢–∏–ø –∞–¥—Ä–µ—Å–∞:** {result['addressType']}")
                    
                    if result['dnsRecords']:
                        st.write("**DNS –∑–∞–ø–∏—Å–∏:**")
                        for record in result['dnsRecords']:
                            st.write(f"- {record}")
                    
                    # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    st.write(f"**–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** {datetime.fromisoformat(result['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º C# (–±—ç–∫–µ–Ω–¥) –∏ Python (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)") 